[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "created_at",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column created_at using expression value.toDate()"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "price",
          "expression": "isBlank(value)",
          "columnName": "price",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "price",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column price using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "high_price",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column high_price using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "high_price",
    "expression": "grel:if(isNull(value), cells[\"prices\"].value, value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column high_price using expression grel:if(isNull(value), cells[\"prices\"].value, value)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "high_price",
    "expression": "grel:if(isNull(value), cells[\"price\"].value, value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column high_price using expression grel:if(isNull(value), cells[\"price\"].value, value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "id",
    "expression": "grel:cell.cross(\"NYPL_Dish\", \"id\").cells[\"name\"].value[0]",
    "onError": "set-to-blank",
    "newColumnName": "dish_name",
    "columnInsertIndex": 1,
    "description": "Create column dish_name at index 1 based on column id using expression grel:cell.cross(\"NYPL_Dish\", \"id\").cells[\"name\"].value[0]"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "dish_name",
          "expression": "grel:isNull(value)",
          "columnName": "dish_name",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "menu_page_id",
    "expression": "grel:cell.cross(\"NYPL_MenuPage\", \"id\").cells[\"menu_id\"].value[0]",
    "onError": "set-to-blank",
    "newColumnName": "menu_id",
    "columnInsertIndex": 3,
    "description": "Create column menu_id at index 3 based on column menu_page_id using expression grel:cell.cross(\"NYPL_MenuPage\", \"id\").cells[\"menu_id\"].value[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "menu_id",
    "expression": "grel:cell.cross(\"NYPL_Menu\", \"id\").cells[\"currency\"].value[0]",
    "onError": "set-to-blank",
    "newColumnName": "currency",
    "columnInsertIndex": 4,
    "description": "Create column currency at index 4 based on column menu_id using expression grel:cell.cross(\"NYPL_Menu\", \"id\").cells[\"currency\"].value[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "menu_id",
    "expression": "grel:cell.cross(\"NYPL_Menu\", \"id\").cells[\"date\"].value[0]",
    "onError": "set-to-blank",
    "newColumnName": "menu_date",
    "columnInsertIndex": 4,
    "description": "Create column menu_date at index 4 based on column menu_id using expression grel:cell.cross(\"NYPL_Menu\", \"id\").cells[\"date\"].value[0]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "text",
          "name": "dish_name",
          "columnName": "dish_name",
          "query": "champa",
          "mode": "text",
          "caseSensitive": false,
          "invert": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "menu_date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column menu_date using expression value.toDate()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "menu_date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column menu_date using expression value.toDate()"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "currency",
          "expression": "grel:value == \"Dollars\"",
          "columnName": "currency",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "dish_name",
          "expression": "grel:or(\n  value.toLowercase().contains(\"caviar\"),\n  value.toLowercase().contains(\"foie\"),\n  value.toLowercase().contains(\"truffle\"),\n  value.toLowercase().contains(\"lobster\"),\n  value.toLowercase().contains(\"turtle\"),\n  value.toLowercase().contains(\"pate\"),\n  value.toLowercase().contains(\"mumm\"),\n  value.toLowercase().contains(\"champagne\"),\n  value.toLowercase().contains(\"quenelle\"),\n  value.toLowercase().contains(\"duxelle\"),\n  value.toLowercase().contains(\"soup\"),\n  value.toLowercase().contains(\"gumbo\"),\n  value.toLowercase().contains(\"rice\"),\n  value.toLowercase().contains(\"potato\"),\n  value.toLowercase().contains(\"apple\"),\n  value.toLowercase().contains(\"banana\"),\n  value.toLowercase().contains(\"onion\"),\n  value.toLowercase().contains(\"beef\"),\n  value.toLowercase().contains(\"milk\"),\n  value.toLowercase().contains(\"oats\")\n)",
          "columnName": "dish_name",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "dish_name",
    "expression": "grel:if(\n  or(\n    value.toLowercase().contains(\"caviar\"),\n    value.toLowercase().contains(\"foie\"),\n    value.toLowercase().contains(\"truffle\"),\n    value.toLowercase().contains(\"lobster\"),\n    value.toLowercase().contains(\"turtle\"),\n    value.toLowercase().contains(\"pate\"),\n    value.toLowercase().contains(\"mumm\"),\n    value.toLowercase().contains(\"champagne\"),\n    value.toLowercase().contains(\"quenelle\"),\n    value.toLowercase().contains(\"duxelle\")\n  ),\n  \"Luxury\",\n  if(\n    or(\n      value.toLowercase().contains(\"soup\"),\n      value.toLowercase().contains(\"gumbo\"),\n      value.toLowercase().contains(\"rice\"),\n      value.toLowercase().contains(\"potato\"),\n      value.toLowercase().contains(\"apple\"),\n      value.toLowercase().contains(\"banana\"),\n      value.toLowercase().contains(\"onion\"),\n      value.toLowercase().contains(\"beef\"),\n      value.toLowercase().contains(\"milk\"),\n      value.toLowercase().contains(\"oats\")\n    ),\n    \"Staple\",\n    \"Other\"\n  )\n)",
    "onError": "set-to-blank",
    "newColumnName": "dish_type",
    "columnInsertIndex": 2,
    "description": "Create column dish_type at index 2 based on column dish_name using expression grel:if(\n  or(\n    value.toLowercase().contains(\"caviar\"),\n    value.toLowercase().contains(\"foie\"),\n    value.toLowercase().contains(\"truffle\"),\n    value.toLowercase().contains(\"lobster\"),\n    value.toLowercase().contains(\"turtle\"),\n    value.toLowercase().contains(\"pate\"),\n    value.toLowercase().contains(\"mumm\"),\n    value.toLowercase().contains(\"champagne\"),\n    value.toLowercase().contains(\"quenelle\"),\n    value.toLowercase().contains(\"duxelle\")\n  ),\n  \"Luxury\",\n  if(\n    or(\n      value.toLowercase().contains(\"soup\"),\n      value.toLowercase().contains(\"gumbo\"),\n      value.toLowercase().contains(\"rice\"),\n      value.toLowercase().contains(\"potato\"),\n      value.toLowercase().contains(\"apple\"),\n      value.toLowercase().contains(\"banana\"),\n      value.toLowercase().contains(\"onion\"),\n      value.toLowercase().contains(\"beef\"),\n      value.toLowercase().contains(\"milk\"),\n      value.toLowercase().contains(\"oats\")\n    ),\n    \"Staple\",\n    \"Other\"\n  )\n)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "dish_name",
    "expression": "grel:filter(\n  [\"caviar\", \"foie\", \"truffle\", \"lobster\", \"turtle\", \"pate\", \"mumm\", \"champagne\", \"quenelle\", \"duxelle\", \"soup\", \"gumbo\", \"rice\", \"potato\", \"apple\", \"banana\", \"onion\", \"beef\", \"milk\", \"oats\"],\n  k,\n  value.toLowercase().contains(k)\n)[0]",
    "onError": "set-to-blank",
    "newColumnName": "normalized_dish_name",
    "columnInsertIndex": 2,
    "description": "Create column normalized_dish_name at index 2 based on column dish_name using expression grel:filter(\n  [\"caviar\", \"foie\", \"truffle\", \"lobster\", \"turtle\", \"pate\", \"mumm\", \"champagne\", \"quenelle\", \"duxelle\", \"soup\", \"gumbo\", \"rice\", \"potato\", \"apple\", \"banana\", \"onion\", \"beef\", \"milk\", \"oats\"],\n  k,\n  value.toLowercase().contains(k)\n)[0]"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "menu_date",
          "expression": "grel:isNull(value)",
          "columnName": "menu_date",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "menu_date",
    "expression": "jython:year = str(value)[0:4]\ncpi_map = {\n  \"1890\": 9.10,\n  \"1891\": 9.03,\n  \"1892\": 8.96,\n  \"1893\": 8.89,\n  \"1894\": 8.82,\n  \"1895\": 8.75,\n  \"1896\": 8.68,\n  \"1897\": 8.61,\n  \"1898\": 8.54,\n  \"1899\": 8.47,\n  \"1900\": 8.40,\n  \"1901\": 8.51,\n  \"1902\": 8.62,\n  \"1903\": 8.73,\n  \"1904\": 8.84,\n  \"1905\": 8.95,\n  \"1906\": 9.06,\n  \"1907\": 9.17,\n  \"1908\": 9.28,\n  \"1909\": 9.39,\n  \"1910\": 9.50,\n  \"1911\": 10.55,\n  \"1912\": 11.60,\n  \"1913\": 12.65,\n  \"1914\": 13.70,\n  \"1915\": 14.75,\n  \"1916\": 15.80,\n  \"1917\": 16.85,\n  \"1918\": 17.90,\n  \"1919\": 18.95,\n  \"1920\": 20.00,\n  \"1921\": 19.71,\n  \"1922\": 19.42,\n  \"1923\": 19.13,\n  \"1924\": 18.84,\n  \"1925\": 18.55,\n  \"1926\": 18.26,\n  \"1927\": 17.97,\n  \"1928\": 17.68,\n  \"1929\": 17.39,\n  \"1930\": 17.10,\n  \"1931\": 16.79,\n  \"1932\": 16.48,\n  \"1933\": 16.17,\n  \"1934\": 15.86,\n  \"1935\": 15.55,\n  \"1936\": 15.24,\n  \"1937\": 14.93,\n  \"1938\": 14.62,\n  \"1939\": 14.31,\n  \"1940\": 14.00\n}\nreturn cpi_map[year]",
    "onError": "set-to-blank",
    "newColumnName": "cpi_raw",
    "columnInsertIndex": 7,
    "description": "Create column cpi_raw at index 7 based on column menu_date using expression jython:year = str(value)[0:4]\ncpi_map = {\n  \"1890\": 9.10,\n  \"1891\": 9.03,\n  \"1892\": 8.96,\n  \"1893\": 8.89,\n  \"1894\": 8.82,\n  \"1895\": 8.75,\n  \"1896\": 8.68,\n  \"1897\": 8.61,\n  \"1898\": 8.54,\n  \"1899\": 8.47,\n  \"1900\": 8.40,\n  \"1901\": 8.51,\n  \"1902\": 8.62,\n  \"1903\": 8.73,\n  \"1904\": 8.84,\n  \"1905\": 8.95,\n  \"1906\": 9.06,\n  \"1907\": 9.17,\n  \"1908\": 9.28,\n  \"1909\": 9.39,\n  \"1910\": 9.50,\n  \"1911\": 10.55,\n  \"1912\": 11.60,\n  \"1913\": 12.65,\n  \"1914\": 13.70,\n  \"1915\": 14.75,\n  \"1916\": 15.80,\n  \"1917\": 16.85,\n  \"1918\": 17.90,\n  \"1919\": 18.95,\n  \"1920\": 20.00,\n  \"1921\": 19.71,\n  \"1922\": 19.42,\n  \"1923\": 19.13,\n  \"1924\": 18.84,\n  \"1925\": 18.55,\n  \"1926\": 18.26,\n  \"1927\": 17.97,\n  \"1928\": 17.68,\n  \"1929\": 17.39,\n  \"1930\": 17.10,\n  \"1931\": 16.79,\n  \"1932\": 16.48,\n  \"1933\": 16.17,\n  \"1934\": 15.86,\n  \"1935\": 15.55,\n  \"1936\": 15.24,\n  \"1937\": 14.93,\n  \"1938\": 14.62,\n  \"1939\": 14.31,\n  \"1940\": 14.00\n}\nreturn cpi_map[year]"
  },
  {
    "op": "core/row-removal",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "cpi_raw",
          "expression": "grel:isNull(value)",
          "columnName": "cpi_raw",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "description": "Remove rows"
  }
]